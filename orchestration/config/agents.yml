# Agent Configuration for SurveyForge
# Contains all agent type definitions and validation profiles

# Dynamic Agent Types Configuration
# Add/remove/modify agents as needed for your project
agent_types:
  rust:
    name: "Rust Backend Agent"
    description: "Implements Rust/Tauri backend features and data processing"
    session_name: "rust-agent"
    prompt_file: "rust_agent.md"
    technologies: ["Rust", "Tokio", "Polars", "Tauri", "CSV Processing"]
    capabilities: ["backend", "data-processing", "performance-optimization"]
    validation_profile: "rust"
  react:
    name: "React Frontend Agent"
    description: "Develops React/TypeScript UI components and user interfaces"
    session_name: "react-agent"
    prompt_file: "react_agent.md"
    technologies: ["React", "TypeScript", "Zustand", "Ant Design", "ECharts"]
    capabilities: ["frontend", "ui-components", "user-experience"]
    validation_profile: "react"
  devops:
    name: "DevOps Agent"
    description: "Manages CI/CD, builds, deployment, and infrastructure"
    session_name: "devops-agent"
    prompt_file: "devops_agent.md"
    technologies: ["GitHub Actions", "Docker", "Cross-platform builds", "Tauri"]
    capabilities: ["ci-cd", "deployment", "infrastructure", "automation"]
    validation_profile: "devops"
  qa:
    name: "QA Agent"
    description: "Reviews code quality, runs testing, and ensures standards"
    session_name: "qa-agent"
    prompt_file: "qa_agent.md"
    technologies: ["cargo test", "Vitest", "Playwright", "Benchmarks", "Accessibility"]
    capabilities: ["testing", "quality-assurance", "performance-testing", "accessibility"]
    validation_profile: "qa"
  pm:
    name: "Project Manager Agent"
    description: "Coordinates workflow, assigns tasks, and tracks progress"
    session_name: "pm-agent"
    prompt_file: "pm_agent.md"
    technologies: ["GitHub Issues", "Project Planning", "Progress Tracking", "Coordination"]
    capabilities: ["project-management", "coordination", "planning", "tracking"]
    validation_profile: "pm"
  docs:
    name: "Documentation Agent"
    description: "Maintains documentation, ADRs, and technical writing"
    session_name: "docs-agent"
    prompt_file: "docs_agent.md"
    technologies: ["Markdown", "API docs", "Architecture decisions", "Technical Writing"]
    capabilities: ["documentation", "technical-writing", "architecture-decisions"]
    validation_profile: "docs"
# Validation Profiles - Define reusable validation sets
validation_profiles:
  rust:
    syntax: "cargo clippy --all-targets --all-features -- -D warnings"
    format: "cargo fmt --all -- --check"
    test: "cargo test --all-features"
    build: "cargo build --release"
    security: "cargo audit"
  react:
    lint: "npm run lint"
    typecheck: "npm run type-check"
    test: "npm run test"
    coverage: "npm run test:coverage"
    build: "npm run build"
    accessibility: "npm run test:a11y"
  devops:
    lint: "shellcheck scripts/*.sh"
    validate: "docker --version && kubectl version --client"
    test: "bats test/"
    security: "trivy filesystem ."
  qa:
    lint: "echo 'QA validation commands'"
    test: "echo 'Running QA test suite'"
    performance: "echo 'Performance benchmark suite'"
  pm:
    validate: "gh auth status && gh project list"
    test: "echo 'Project management validation'"
  docs:
    lint: "markdownlint docs/"
    test: "echo 'Documentation validation'"
    links: "markdown-link-check docs/*.md"
# Agent Assignment Rules (optional)
# Define which agent types can work on which capabilities
assignment_rules:
  backend_tasks: ["rust"]
  frontend_tasks: ["react"]
  infrastructure_tasks: ["devops"]
  testing_tasks: ["qa", "rust", "react"] # Multiple agents can handle testing
  documentation_tasks: ["docs", "pm"]
  coordination_tasks: ["pm"]
