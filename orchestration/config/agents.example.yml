# Agent Configuration Template
# Copy this file to config/agents.yml and customize for your project

# Agent Types Registry - References agent directories
# Each agent type points to a directory containing config.yml and prompt.md
# Add/remove agents by creating/removing directories in the agents/ folder
agent_types:
  # Backend agent - CUSTOMIZE in agents/backend/config.yml
  backend:
    directory: "agents/backend"
    
  # Frontend agent - CUSTOMIZE in agents/frontend/config.yml  
  frontend:
    directory: "agents/frontend"
    
  # DevOps agent - CUSTOMIZE in agents/devops/config.yml
  devops:
    directory: "agents/devops"
    
  # QA agent - CUSTOMIZE in agents/qa/config.yml
  qa:
    directory: "agents/qa"
    
  # Project management agent - CUSTOMIZE in agents/pm/config.yml
  pm:
    directory: "agents/pm"
    
  # Documentation agent - CUSTOMIZE in agents/docs/config.yml
  docs:
    directory: "agents/docs"

# EXAMPLES: Add more agent types by creating new directories
# To add a new agent type:
# 1. Create directory: mkdir agents/your-agent-name
# 2. Create config: agents/your-agent-name/config.yml  
# 3. Create prompt: agents/your-agent-name/prompt.md
# 4. Add reference here:
#  your-agent-name:
#    directory: "agents/your-agent-name"

# Common additional agent types you might want to add:
#  mobile:
#    directory: "agents/mobile"
#  data:
#    directory: "agents/data"  
#  security:
#    directory: "agents/security"

# Validation Profiles - Define reusable validation command sets
# CUSTOMIZE these based on your technology stack
validation_profiles:
  # Backend validation - CUSTOMIZE for your backend stack
  backend:
    syntax: "your-backend-lint-command"     # e.g., "eslint ." or "cargo clippy"
    format: "your-backend-format-command"   # e.g., "prettier --check ." or "cargo fmt --check"
    test: "your-backend-test-command"       # e.g., "npm test" or "cargo test"
    build: "your-backend-build-command"     # e.g., "npm run build" or "cargo build"
    security: "your-security-scan-command"  # e.g., "npm audit" or "cargo audit"
    
  # Frontend validation - CUSTOMIZE for your frontend stack
  frontend:
    lint: "your-frontend-lint-command"      # e.g., "npm run lint"
    typecheck: "your-typecheck-command"     # e.g., "npm run type-check" or "tsc --noEmit"
    test: "your-frontend-test-command"      # e.g., "npm run test"
    coverage: "your-coverage-command"       # e.g., "npm run test:coverage"
    build: "your-frontend-build-command"    # e.g., "npm run build"
    accessibility: "your-a11y-command"      # e.g., "npm run test:a11y"
    
  # DevOps validation - CUSTOMIZE for your deployment stack
  devops:
    lint: "shellcheck scripts/*.sh"
    validate: "your-infra-validate-command"  # e.g., "terraform validate"
    test: "your-infra-test-command"         # e.g., "bats test/"
    security: "your-security-scan-command"   # e.g., "trivy filesystem ."
    
  # QA validation - CUSTOMIZE for your testing approach
  qa:
    lint: "your-qa-lint-command"
    test: "your-comprehensive-test-suite"
    performance: "your-performance-test-command"
    integration: "your-integration-test-command"
    
  # Project management validation - usually keep as-is
  pm:
    validate: "gh auth status && gh project list"
    test: "echo 'Project management validation'"
    
  # Documentation validation - CUSTOMIZE for your docs stack
  docs:
    lint: "markdownlint docs/"              # or your preferred markdown linter
    test: "your-docs-test-command"
    links: "markdown-link-check docs/*.md"  # or your preferred link checker

# Agent Assignment Rules (optional)
# Define which agent types can work on which capabilities
assignment_rules:
  backend_tasks: ["backend"]
  frontend_tasks: ["frontend"]
  mobile_tasks: ["mobile"]                # Only if you have mobile agent
  infrastructure_tasks: ["devops"]
  testing_tasks: ["qa", "backend", "frontend"]  # Multiple agents can handle testing
  documentation_tasks: ["docs", "pm"]
  coordination_tasks: ["pm"]
  security_tasks: ["security"]            # Only if you have security agent
  data_tasks: ["data"]                    # Only if you have data agent

# QUICK SETUP GUIDE:
# 1. Copy this file to config/agents.yml
# 2. Customize individual agent configs in agents/*/config.yml
# 3. Customize agent prompts in agents/*/prompt.md
# 4. Update validation commands for your technology stack
# 5. Add/remove agent directories as needed
# 6. Run: ./scripts/config_loader.sh validate